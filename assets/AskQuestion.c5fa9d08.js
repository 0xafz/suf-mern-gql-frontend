var G=Object.defineProperty,Z=Object.defineProperties;var J=Object.getOwnPropertyDescriptors;var N=Object.getOwnPropertySymbols;var F=Object.prototype.hasOwnProperty,L=Object.prototype.propertyIsEnumerable;var $=(e,t,a)=>t in e?G(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,h=(e,t)=>{for(var a in t||(t={}))F.call(t,a)&&$(e,a,t[a]);if(N)for(var a of N(t))L.call(t,a)&&$(e,a,t[a]);return e},S=(e,t)=>Z(e,J(t));var M=(e,t)=>{var a={};for(var i in e)F.call(e,i)&&t.indexOf(i)<0&&(a[i]=e[i]);if(e!=null&&N)for(var i of N(e))t.indexOf(i)<0&&L.call(e,i)&&(a[i]=e[i]);return a};import{_ as d,a as w,j as s,R as O,r as I,F as X,a6 as tt,I as et,O as ot,s as j,$ as at,d as rt,t as nt,v as it,a7 as st,a8 as lt,T as V,a9 as dt,b as ct,h as Y}from"./index.d80fec5a.js";const ut={"--tw-bg-opacity":"1",backgroundColor:"rgba(233, 216, 253, var(--tw-bg-opacity))","--tw-text-opacity":"1",color:"rgba(68, 51, 122, var(--tw-text-opacity))",":hover":{"--tw-bg-opacity":"1",backgroundColor:"rgba(68, 51, 122, var(--tw-bg-opacity))","--tw-text-opacity":"1",color:"rgba(255, 255, 255, var(--tw-text-opacity))"},outlineColor:"darkorange",fontSize:"0.75rem",opacity:"0.75",borderStyle:"solid",borderWidth:"1px","--tw-border-opacity":"1",borderColor:"rgba(85, 60, 154, var(--tw-border-opacity))",borderRadius:"0.125rem",padding:".1rem .5rem",textDecoration:"none"},H=e=>{const c=e,{label:t,onDelete:a}=c,i=M(c,["label","onDelete"]);return w(pt,S(h({},i),{$_css:[ut,{display:"flex",alignItems:"center",height:"1.5rem",boxSizing:"content-box",margin:"2px",paddingLeft:"0.75rem",paddingRight:"0.25rem"}],children:[t,s(mt,{type:"button",onClick:a,children:"\u2716"})]}))};var pt=d("span").withConfig({displayName:"Chips___StyledSpan",componentId:"sc-927izd-0"})(["",""],e=>e.$_css),mt=d("button").withConfig({displayName:"Chips___StyledButton",componentId:"sc-927izd-1"})({marginLeft:"0.25rem",fontWeight:"700",backgroundColor:"rgba(0, 0, 0, 0)",fontSize:"0.75rem","--tw-text-opacity":"1",color:"rgba(85, 60, 154, var(--tw-text-opacity))"});const gt=O.forwardRef(function(P,k){var f=P,{disabled:t,value:a,inputValue:i,onInputChange:c,onChange:v,renderInput:y,renderTags:A,fullWidth:W,ChipProps:u}=f,Q=M(f,["disabled","value","inputValue","onInputChange","onChange","renderInput","renderTags","fullWidth","ChipProps"]);const z=!t&&(i||a.length>0),[p,B]=I.exports.useState(a),[b,_]=I.exports.useState(i||""),x=(o,n,g,D)=>{p!==n&&(v&&v(o,n,g,D),B(n))},q=o=>n=>{const g=p.slice();g.splice(o,1),x(n,g,"removeOption",{option:p[o]})},E=o=>{_(""),c&&c(o,"","clear"),x(o,[],"clear")},r=o=>{const n=o.target.value;b!==n&&(_(n),c&&c(o,n,"input"))},l=O.useCallback((o,n)=>{let g;n?g=n:g="",_(g),c&&c(o,n,"reset")},[_,c]),C=(o,n,g="selectOption")=>{let D=Array.isArray(p)?p.slice():[];p.findIndex(U=>U===n)===-1&&(D.push(n),x(o,D,g,{option:n})),l(o,"")},m=o=>{switch(o.key){case"Enter":if(o.preventDefault(),t||!b)return;C(o,b,"selectOption");break;default:return}},R=({index:o})=>({key:o,"data-tag-index":o,tabIndex:-1,onDelete:q(o)}),K=()=>({tabIndex:-1,onClick:E});let T;return p.length>0&&(A?T=A(p,R):T=p.map((o,n)=>s(H,h(h({label:o},R({index:n})),u)))),s(X,{children:s("div",{onKeyDown:m,children:y(h({tag:"input",disabled:t,fullWidth:!0,ref:k,value:b,onChange:r,InputProps:{startAdornment:T,endAdornment:z?s(ht,S(h({},K()),{children:s(tt,{})})):null},styles:{input:{flexGrow:"1",width:"0",minWidth:"8em"},inputRoot:{flexWrap:"wrap"}}},Q))})})});var ht=d(et).withConfig({displayName:"AutoComplete___StyledInputAdornment",componentId:"sc-6amhk0-0"})({cursor:"pointer",fontSize:"1.5em"});const yt=ot({title:j().required("Required").min(15,"Must be at least 15 characters"),body:j().required("Required").min(30,"Must be at least 30 characters")}),Nt=()=>{const e=at(),{editValues:t,clearEdit:a,notify:i}=rt(),[c,v]=I.exports.useState(""),[y,A]=I.exports.useState(t?t.tags:[]),[W,u]=I.exports.useState(""),{register:Q,handleSubmit:k,reset:P,formState:{errors:f}}=nt({defaultValues:{title:t?t.title:"",body:t?t.body:""},mode:"onChange",resolver:it(yt)}),[z,{loading:p}]=st({onError:r=>{u(Y(r))}}),[B,{loading:b}]=lt({onError:r=>{u(Y(r))}}),_=({title:r,body:l})=>{if(y.length===0)return u("Atleast one tag must be added.");z({variables:{title:r,body:l,tags:y},update:(C,{data:m})=>{e(`/questions/${m==null?void 0:m.postQuestion._id}`),P(),i("Question posted!")}})},x=({title:r,body:l})=>{if(y.length===0)return u("Atleast one tag must be added.");B({variables:{quesId:t.quesId,title:r,body:l,tags:y},update:(C,{data:m})=>{e(`/questions/${m==null?void 0:m.editQuestion._id}`),a(),i("Question edited!")}})},q=r=>{const l=r.toLowerCase().trim();if(!/^[a-zA-Z0-9-]*$/.test(r))return u("Only alphanumeric characters & dash are allowed.");if(l.length>15)return u("A single tag can't have more than 15 characters.");v(l)},E=r=>{if(y.length>=5)return v(""),u("Max 5 tags can be added! Not more than that.");if(y.includes(r))return u("Duplicate tag found! You can't add the same tag twice.");A(r)};return w(ft,{children:[s(bt,{children:t?"Edit Your Question":"Ask A Question"}),w(_t,{onSubmit:k(t?x:_),children:[w(St,{children:[s(wt,{children:"Be specific and imagine you\u2019re asking a question to another person"}),s(V,S(h({tag:"input",required:!0,fullWidth:!0},Q("title")),{placeholder:"Enter atleast 15 characters",type:"text",label:"Title",error:"title"in f,helperText:"title"in f?f.title.message:""}))]}),w(vt,{children:[s(xt,{children:"Include all the information someone would need to answer your question"}),s(V,S(h({tag:"textarea",required:!0,rows:5,fullWidth:!0},Q("body")),{placeholder:"Enter atleast 30 characters",label:"Body",error:"body"in f,helperText:"body"in f?f.body.message:""}))]}),w(Ct,{children:[s(It,{children:"Add up to 5 tags to describe what your question is about"}),s(gt,{value:y,inputValue:c,onInputChange:(r,l)=>{q(l)},onChange:(r,l)=>{E(l)},renderInput:r=>s(V,S(h({},r),{label:"Tags",placeholder:"press Enter to add tags",fullWidth:!0})),renderTags:(r,l)=>r.map((C,m)=>s(H,h({label:C,color:"primary",size:"small"},l({index:m}))))})]}),s(At,{type:"submit",disabled:p||b,children:t?"Update Your Question":"Post Your Question"}),s(dt,{errorMsg:W,clearErrorMsg:()=>u("")})]})]})};var ft=d("div").withConfig({displayName:"AskQuestion___StyledDiv",componentId:"sc-1a45n54-0"})({width:"100%",marginTop:"1.5rem",marginBottom:"1.5rem",marginLeft:"0.75rem",marginRight:"0.75rem"}),bt=d("h1").withConfig({displayName:"AskQuestion___StyledH",componentId:"sc-1a45n54-1"})({"--tw-text-opacity":"1",color:"rgba(68, 51, 122, var(--tw-text-opacity))",fontSize:"1.25rem"}),_t=d("form").withConfig({displayName:"AskQuestion___StyledForm",componentId:"sc-1a45n54-2"})({marginTop:"1rem","--tw-text-opacity":"1",color:"rgba(85, 60, 154, var(--tw-text-opacity))"}),St=d("div").withConfig({displayName:"AskQuestion___StyledDiv2",componentId:"sc-1a45n54-3"})({marginBottom:"1rem"}),wt=d("p").withConfig({displayName:"AskQuestion___StyledP",componentId:"sc-1a45n54-4"})({fontSize:"0.75rem",marginBottom:"0.5rem"}),vt=d("div").withConfig({displayName:"AskQuestion___StyledDiv3",componentId:"sc-1a45n54-5"})({marginBottom:"1rem"}),xt=d("p").withConfig({displayName:"AskQuestion___StyledP2",componentId:"sc-1a45n54-6"})({fontSize:"0.75rem",marginBottom:"0.5rem"}),Ct=d("div").withConfig({displayName:"AskQuestion___StyledDiv4",componentId:"sc-1a45n54-7"})({marginBottom:"1rem"}),It=d("p").withConfig({displayName:"AskQuestion___StyledP3",componentId:"sc-1a45n54-8"})({fontSize:"0.75rem",marginBottom:"0.5rem"}),At=d(ct).withConfig({displayName:"AskQuestion___StyledButton",componentId:"sc-1a45n54-9"})({"--tw-bg-opacity":"1",backgroundColor:"rgba(107, 70, 193, var(--tw-bg-opacity))",":hover":{"--tw-bg-opacity":"1",backgroundColor:"rgba(85, 60, 154, var(--tw-bg-opacity))"},fontSize:"0.875rem","@media (min-width: 640px)":{fontSize:"1rem"}});export{Nt as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
