# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Answer {
  _id: ID!
  author: User!
  body: String!
  comments: [Comment]!
  createdAt: Float!
  downvotedBy: [User]!
  points: Float!
  updatedAt: Float!
  upvotedBy: [User]!
}

type AnswerRep {
  ansId: Answer!
  rep: Float!
}

type Author {
  id: ID!
  username: String!
}

type Comment {
  _id: ID!
  author: User!
  body: String!
  createdAt: Float!
  updatedAt: Float!
}

type LoggedUser {
  id: ID!
  role: String!
  token: String!
  username: String!
}

type Mutation {
  acceptAnswer(ansId: String!, quesId: String!): Question!
  addAnsComment(ansId: String!, body: String!): [Comment!]!
  addQuesComment(body: String!, quesId: String!): [Comment!]!
  deleteAnsComment(ansId: String!, commentId: String!): ID!
  deleteAnswer(ansId: String!, quesId: String!): ID!
  deleteQuesComment(commentId: String!, quesId: String!): ID!
  deleteQuestion(quesId: ID!): ID!
  editAnsComment(ansId: String!, body: String!, commentId: String!): [Comment!]!
  editAnswer(ansId: String!, body: String!, quesId: String!): [Answer!]!
  editQuesComment(body: String!, commentId: String!, quesId: String!): [Comment!]!
  editQuestion(body: String!, quesId: ID!, tags: [String!]!, title: String!): Question!
  login(password: String!, username: String!): LoggedUser!
  postAnswer(body: String!, quesId: ID!): [Answer!]!
  postQuestion(body: String!, tags: [String!]!, title: String!): Question!
  register(password: String!, username: String!): LoggedUser!
  voteAnswer(ansId: String!, quesId: String!, voteType: Float!): Answer!
  voteQuestion(quesId: ID!, voteType: Float!): Question!
}

type NextPrevPage {
  limit: Float!
  page: Float!
}

type PaginatedQuesList {
  next: NextPrevPage
  previous: NextPrevPage
  questions: [Question]!
}

type Query {
  getAllTags: [Tag!]!
  getAllUsers: [User!]!
  getQuestions(filterBySearch: String, filterByTag: String, limit: Int!, page: Int!, sortBy: SortByType!): PaginatedQuesList!
  getUser(username: String!): User!
  hello: String!
  viewQuestion(quesId: ID!): Question!
}

type Question {
  _id: ID!
  acceptedAnswer: Answer!
  answerCount: Int!
  answers: [Answer]!
  author: User!
  body: String!
  comments: [Comment]!
  createdAt: Float!
  downvotedBy: [User]!
  hotAlgo: Float!
  points: Float!
  tags: [String!]!
  title: String!
  updatedAt: Float!
  upvotedBy: [User]!
  views: Float!
}

type QuestionRep {
  quesId: Question!
  rep: Float!
}

type RecentActivity {
  _id: ID!
  createdAt: Float!
  points: Float!
  title: String!
}

enum RoleType {
  ADMIN
  USER
}

enum SortByType {
  HOT
  NEWEST
  OLDEST
  VIEWS
  VOTES
}

type Tag {
  count: Float!
  tagName: String!
}

type User {
  _id: ID!
  answers: [AnswerRep]!
  createdAt: Float!
  id: ID!
  questions: [QuestionRep]!
  recentAnswers: [RecentActivity]!
  recentQuestions: [RecentActivity]!
  reputation: Int!
  role: RoleType!
  totalAnswers: Int!
  totalQuestions: Int!
  username: String!
}
